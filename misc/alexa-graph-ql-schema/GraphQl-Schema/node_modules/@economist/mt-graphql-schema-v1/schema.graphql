type Ad {
  grapeshot: Grapeshot
  siteCode: String
  zoneCode: String
  environment: String
}

# Attributes of the image object
type Attributes {
  # Alternate description of image
  alt: String

  # Description of image
  caption: String

  # Height of image
  height: Int

  # Path of image
  path: String

  # Width of image
  width: String
}

# Canonical content type.
type Content {
  # The subject matter of the content.
  about: Taxonomies

  # Specifies the Person that is legally accountable for the CreativeWork.
  accountablePerson: Content

  # Advert related meta data.
  ad: Ad

  # Articles may belong to one or more sections in a magazine or newspaper.
  articleSection: Taxonomies

  # List of other media objects associated, e.g. pdf.
  associatedMedia: Content

  # An intended audience, i.e. a group for whom something was created.
  audience: String

  # Audio data associated to this content.
  audio: Media

  # The authors of this content or the recorders of this media.
  author: [Content]

  # Switch to automatically start this media.
  autoStart: Boolean

  # The bitrate of the media object.
  bitrate: String

  # Accompanying line of text giving the author's name or credits for multimedia assets.
  byline: String

  # Channel such as a website, blog, periodical or publication where this content
  # was originally published, e.g. Espresso, economist.com, The Economist, 1843, etc.
  channel: Content

  # Reference to associated user generated content
  # TODO comment: hyperMediaRef
  # Context - provides contextual information around the
  # content in relation to other content i.e list position.
  context: Content

  # secondary contributors to the CreativeWork.
  contributor: [Content]

  # The party holding the legal copyright to the CreativeWork.
  copyrightHolder: String

  # The year during which the claimed copyright for the CreativeWork was first asserted.
  copyrightYear: Int

  # The GMT date on which the content was created.
  dateCreated(format: String): String

  # The GMT date on which the content will expire.
  dateExpired(format: String): String

  # The GMT date on which the content was last modified.
  dateModified(format: String): String

  # The GMT date on which the content was published.
  datePublished(format: String): String

  # The location where the NewsArticle was produced.
  dateline: String

  # Rubric, short description of the item, ALT attribute of image.
  description: String

  # The duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format.
  duration: String

  # Encoding format of this Media: mp3, mpeg4, etc.
  encodingFormat: String

  # IPTC Genre Codes
  genre: [Content]

  # Indicates a CreativeWork that this CreativeWork is (in some sense) part of.
  hasPart(from: Int, size: Int, sort: String): HasPart

  # Head or Title of the content or ALT-text of an image, full name of an person, etc.
  headline: String

  # The height of the item in device pixels.
  height: Int

  # Identifier hypermedia URL for this payload, based on the MT API Gateway if relative.
  id: ID

  # Image data associated to this content
  image: Media

  # ISO 639 code of the language of the content or performance or used in an action.
  inLanguage: String

  # A flag to signal  if the payload requires a subscription or is accessible for
  # free. It is more generic than just 'requiresSubscription'.
  isAccessibleForFree: Boolean

  # Indicates a list of documents that are in some sense) a part of this document.
  isPartOf: [Content]

  # Job title (if this Content refers to a Person)
  jobTitle: String

  # Keywords or tags used to describe this content. Multiple entries in a keyword
  # (singular form follows schema.org convention).
  keyword: [String]

  # A license document that applies to this content, typically indicated by URL.
  license: String

  # The locations where the CreativeWork was created, which may not be the same as
  # the location depicted in the CreativeWork. Preferable as wikidata reference.
  locationCreated: Content

  # The MIME type of the body.
  mimetype: String

  # Position - contextual position of content in a list.
  position: Float

  # Grouping all print specific data into one nested object.
  print: Print

  # Publication such as a issue, edition or publication volume, usually containing
  # a grouping of works such as articles. It replaces printEdition.
  publication: [Content]

  # The publisher of the content.
  publisher: Content

  # The ISO 3166 region codes where the media is allowed. If not specified, then it's assumed to be allowed everywhere.
  regionsAllowed: [String]

  # Different formats and renditions of this media, e.g. different video, audio or image formats and qualities.
  rendition: [Content]

  # URL of a reference Web page that unambiguously indicates the item's identity,
  # e.g. cross reference of proprietary taxonomy term to public ressource.
  sameAs: ID

  # The Organization on whose behalf the creator was working, The photo agency on whose behalf the photographer was working.
  sourceOrganization: Content

  # A person or organization that supports (sponsors) something through some kind of financial contribution.
  sponsor: Content

  # Sub-headline or flytitle of this document.
  subheadline: String

  # A byline at the end of a story.
  tagline: String

  # The Economist Group canonical unique identifier for this document. Using Base32-Hex (RFC).
  tegID: ID

  # Economist Group internal content type.
  tegType: String

  # Set of Schema.org content types.
  type: [String]

  # The MIME type encoded text of the body.
  text(format: String): StringOrJson

  # Twitter handle (if this Content refers to a Person)
  twitter: String

  # URLs associated with the content.
  url: URL

  # Semantic version of the payload worker.
  version: String

  # Video data associated to this content.
  video: Media

  # The width of the item in device pixels.
  width: Int

  # Publication status of this piece of content during editorial workflow.
  workflow: String
  actionableFeedbackPolicy: String
  correctionsPolicy: String
  diversityPolicy: String
  diversityStaffingReport: String
  ethicsPolicy: String
  foundingDate: String
  ownershipFundingInfo: String
  masthead: String
  missionCoveragePrioritiesPolicy: String
  verificationFactCheckingPolicy: String
  unnamedSourcesPolicy: String
  temporaryV0EscapeHatch: XRef
}

# Information for ads provided by DoubleClick For Publishers
#   (https://jira.economist.com/wiki/display/EBR/Ads+endpoint+and+refactor)
type dfp {
  # The zone of the ad
  zone: String

  # The site of the ad
  site: String

  # The environment where the ad is published
  environment: String
}

type Grapeshot {
  channels: [GrapeshotChannel]
}

# A grapeshot channel
type GrapeshotChannel {
  name: String
  score: Float
}

type HasPart {
  total: Int
  parts: [Content]
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type Media {
  cover: [Content]
  inline: [Content]
  main: Content
}

type Menu {
  # The identifier of a menu
  id: String

  # The type of a menu
  type: String

  # The list of links in a menu
  links: [MenuLink]
}

# A link object belonging to a menu
type MenuLink {
  # The title of a link
  title: String

  # The href of a link
  href: String

  # The meta of a link
  meta: String

  # The order index of a link
  order: Int

  # Whether the link is internal (IE: if it opens in a new tab or not)
  internal: Boolean
}

type Print {
  # Print specific accompanying line of text giving the author's name or credits for multimedia assets.
  byline: String

  # The number of the column in which the NewsArticle appears in the print edition.
  column: String

  # print specific rubric, short description
  description: String

  # print specific head or Title of the content or ALT-text of an image, full name of an person, etc.
  headline: String

  # this field indicates the name of the page on which the article is found.
  # Please note that this field is intended for the exact page name (e.g. A5, B18).
  page: String

  # this field indicates the page number on which the article ends  on the print edition.
  pageEnd: Int

  # this field indicates the page number on which the article starts on the print edition.
  pageStart: Int

  # print section
  section: Content

  # print specific sub-headline or flytitle of this document.
  subheadline: String

  # A print specific byline at the end of a story.
  tagline: String
}

# Alternative print headlines for a print article
type PrintHeadlines {
  # The print description of the article
  description: String

  # The print title for the article
  headline: String

  # The print flyTitle for the article
  subHeadline: String
}

# Public about links
type public {
  # About links
  ref: String
}

type Query {
  # acquire a piece of content given its URL. Uses the content platform's xref service.
  content(
    # The web URL of the content
    path: String

    # The node ID of the content
    id: String
  ): XRef
  menus(
    # The ids of the menus to retrieve
    ids: [String]!
  ): [Menu]
  videos: videos

  # wikidata for schema.org
  wikidata: wikidataEntity

  # Returns data in the canonical model.
  # workflow defaults to "pub" (published) but can be "del" (deleted/unpublished), etc.
  # body defaults to "html" but can be "json" or "text"
  # ref is a CP URL. Example: canonical(ref: "/xref/economist/trumpinterview")
  canonical(ref: String!, body: String, workflow: String): Content
  lookup(ref: String!, payload: String): ReverseLookup
}

# response object for the "lookup" query
type ReverseLookup {
  # The source ID of the content.
  id: String

  # The source type i.e. "node".
  idType: String

  # The source itself i.e. "economist".
  source: String
  rawResponse: String
}

# Mixed type with string or JSON representation
scalar StringOrJson

type Taxonomies {
  # List of internal/proprietary concepts.
  internal: [Content]

  # List of public concepts, e.g. based on IPTC or Wikidata.
  public: [Content]
}

# Link to Economist group site
type url {
  # Canonical link to Economist group
  canonical: String
}

type URL {
  # List of URLs the article can be or could be found but isn't the primary URL
  alias: [String]

  # The primary URL of this creative work
  canonical: String

  # Default short URL
  short: String
}

# Videos for the daily watch from Espresso App
type videos {
  # The latest videos from the Espresso App
  videosList(
    # A list of latest videos
    latest: Int = 4
  ): [VideosList]
}

# A list of videos form the Espresso App
type VideosList {
  # type of object
  type: String

  # The id of the video
  nid: String

  # The title of the video
  headline: String

  # The date the video was published
  date: String

  # The body text of the video
  body: String

  # The sharing link of the video
  shareLink: String

  # The streaming link of the video
  streamLink: String

  # The image of the video
  leaderImage: String

  # The small image of the video
  leaderImageSmall: String
}

# About links
type wikiDataAboutType {
  # List of public links
  public: [public]
}

# Wikidata for schema.org
type wikidataEntity {
  # About links
  about: wikiDataAboutType

  # Policy for actionable feedback
  actionableFeedbackPolicy: String

  # Policy for corrections
  correctionsPolicy: String

  # Copyright holder
  copyrightHolder: String

  # tegType
  tegType: String

  # Description of the company
  description: String

  # Policy for diveristy
  diversityPolicy: String

  # Report for staff diversity
  diversityStaffingReport: String

  # Policy for ethics
  ethicsPolicy: String

  # Date the Economist was founded
  foundingDate: String

  # Headline for the company
  headline: String

  # ID for the company
  id: String

  # Main language of the site
  inLanguage: String

  # Keywords for the Economist
  keyword: [String]

  # The company's license
  license: String

  # Ownership funding info
  ownershipFundingInfo: String

  # Masthead
  masthead: String

  # Policy for mission coverage priorities
  missionCoveragePrioritiesPolicy: String

  # Type of organisation
  type: [String]

  # Policy for verification fact checking
  verificationFactCheckingPolicy: String

  # Policy for unnamed sources
  unnamedSourcesPolicy: String

  # Link to Economist group site
  url: url
}

type XRef {
  # The content's node ID. Don't be fooled! it's not always a number!
  id: String

  # The immutable originalID coming from the MT
  originalID: String

  # A non-unique machine-friendly identifier as a human-readable lowercase and dashes string
  slug: String

  # What kind of content it is (blog post? article?)
  type: String

  # Whether this is an article or a list
  superType: String

  # The title of this content
  title: String
  flyTitle: String

  # The topic. Only appears in blogs.
  topic: String

  # Trust project - list of type of content
  tpType: [String]

  # Trust project - author
  tpAuthor: String

  # Trust project - citations
  citations: [String]

  # The rubric of an article (short text displayed above the body)
  rubric: String

  # When this piece of content was created
  dateCreated: String

  # When this piece of content was last changed
  dateModified: String

  # When this piece of content was published.
  datePublished: String

  # Formatted string describing when this was created
  dateCreatedString: String

  # Formatted string describing when this was last modified
  dateModifiedString: String

  # Date of publication, as a formatted string
  datePublishedString: String

  # Formatted string describing when the post was published, in relative time. Example: "X hours ago", "yesterday"
  dateCreatedTimeAgo: String

  # Formatted string describing when the post was published, in relative time. Example: "X hours ago", "yesterday"
  datePublishedTimeAgo: String

  # The post's author
  author: String
  byline: String

  # A description of a Blog. Only applies to Blogs.
  description: String

  # A short excerpt of the text contents, in case of an article
  teaser: String

  # The post in its entirety
  text: String

  # The post parsed as an html tree
  html: JSON

  # Configurations related to the exposed content
  configuration: JSON

  # The canonical public URL of the piece of content
  webURL: String

  # Image used at the top of the article.
  mainImageObj: Attributes

  # Image used at the top of the article.
  mainImage: String

  # Image used for list pages, social sharing, meta tags.
  promoImage: Attributes

  # The collection this content belongs to. Can be a blog in the case of a blog post, or a section in the case of an article
  parent: XRef

  # Reverse lookup for a storyCollection this content could belong to.
  parentCollection(
    # The ID of the collection we want to check.
    collectionID: Int

    # The ids of the collections to reverse lookup
    ids: [Int]
  ): XRef

  # Print titles and flyTitles for an article
  print: PrintHeadlines

  # (print articles only) Information of the issue an article belongs to
  issueInformation: XRef

  # Children of this content type. May be the posts of a blog, or the items on the rows of the home page.
  issueSiblings(
    # Paginate the children. Defaults to page 0, and doesn't apply to print editions.
    page: Int

    # What item to start *from*
    from: Int

    # What item to end in (exclusive). "-1" gets translated to "everything until the end", also known as "to=max"
    to: Int
  ): XRefPage

  # siblings of an article in a section
  sectionSiblings(
    # Paginate the children. Defaults to page 0, and doesn't apply to print editions.
    page: Int

    # What item to start *from*
    from: Int

    # What item to end in (exclusive). "-1" gets translated to "everything until the end", also known as "to=max"
    to: Int
  ): XRefPage

  # The number of comments.
  commentCount: Int

  # The current status of the comments.
  commentStatus: String

  # Follow the paywall.
  followPaywall: Boolean

  # (articles only) whether this came from a print edition
  printEdition: Boolean

  # (articles only) the name of the print section this article came in, in case of a print edition article
  printSectionName: String

  # (articles only) the url of the article section
  articleSection: String

  # DoubleClick for Publishers site, zone and environment.
  dfp: dfp

  # A mapper link that returns the print edition details
  newIssue: String

  # (articles only) country where the article is from
  locationCreated: String

  # Children of this content type. May be the posts of a blog, or the items on the rows of the home page.
  children(
    # Paginate the children. Defaults to page 0, and doesn't apply to print editions.
    page: Int

    # What item to start *from*
    from: Int

    # What item to end in (exclusive). "-1" gets translated to "everything until the end", also known as "to=max"
    to: Int
  ): XRefPage

  # A list of automated tags from grapeshot
  grapeshot: [String]

  # A list of topics this content belongs to
  topics: [XRef]

  # Public-facing URL of the RSS feed (if applicable)
  rss: String

  # Public-facing URL of the Atom feed (if applicable)
  atom: String

  # Official twitter account (blogs only)
  twitter: String

  # Whether the element is internal or external of the website
  internal: Boolean
  temporaryV1EscapeHatch: Content
}

# A page of arbitrary content elements. Contains the entries of this page, and informs whether it's the last page
type XRefPage {
  # Entries in this page
  entries: [XRef]

  # Flag signaling this is the last page
  isLastPage: Boolean

  # Total results available in list
  resultCount: Int

  # Total pages available in list
  pageCount: Int
}
